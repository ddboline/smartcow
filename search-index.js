var searchIndex = JSON.parse('{\
"smartcow":{"doc":"This crate offers a small utility type, [<code>SmartCow</code>] that …","t":[13,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Borrowed","Owned","SmartCow","as_ref","as_ref","borrow","borrow_mut","clone","clone_into","default","deref","eq","eq","eq","eq","fmt","fmt","from","from","from","from","from","hash","into","into_owned","to_owned","to_owned","to_string","try_from","try_into","type_id"],"q":["smartcow","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["a [<code>std::str</code>] borrow","a [<code>smartstring::SmartString</code>]","The primary type for this crate, which holds either a …","","","","","","","","","","","","","","","","","","","","","","Build a ’static duplicate of this SmartCow by value, by …","","Build a ’static duplicate of this SmartCow by cloning a …","","","",""],"i":[1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[null,null,null,[[],["str",15]],[[]],[[]],[[]],[[],["smartcow",4]],[[]],[[]],[[]],[[["string",3]],["bool",15]],[[],["bool",15]],[[["smartcow",4]],["bool",15]],[[["string",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["cow",4],["str",15]]],[[["str",15]]],[[["string",3]]],[[["smartstring",3],["lazycompact",3]]],[[]],[[]],[[]],[[],["smartcow",4]],[[]],[[],["smartcow",4]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]]],"p":[[4,"SmartCow"]]},\
"smartstring":{"doc":"Smart String","t":[16,3,18,18,3,16,3,17,3,8,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,6,6],"n":["BoxedString","Compact","DEALLOC","DEALLOC","Drain","InlineArray","LazyCompact","MAX_INLINE","SmartString","SmartStringMode","add","add","add","add","add","alias","as_mut","as_mut_str","as_ref","as_ref","as_str","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone_into","cmp","default","deref","deref_mut","drain","drop","drop","eq","eq","eq","eq","extend","extend","extend","extend","extend","extend","extend","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_str","hash","index","index","index","index","index","index","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","insert","insert_str","into","into","into","into","into","into_iter","is_empty","is_inline","last","len","new","new_const","new_const","next","next_back","partial_cmp","partial_cmp","pop","push","push_str","remove","replace_range","retain","shrink_to_fit","size_hint","split_off","to_owned","to_string","truncate","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","validate","write_str","CompactString","String"],"q":["smartstring","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","smartstring::alias",""],"d":["The boxed string type for this layout.","A compact string representation equal to [<code>String</code>] in size …","A constant to decide whether to turn a wrapped string …","A constant to decide whether to turn a wrapped string …","A draining iterator for a [<code>SmartString</code>].","The inline string type for this layout.","A representation similar to [<code>Compact</code>] but which doesn’t …","The maximum capacity of an inline string, in bytes.","A smart string.","Marker trait for [<code>SmartString</code>] representations.","","","","","","Convenient type aliases.","","Get a reference to the string as a mutable string slice.","","","Get a reference to the string as a string slice.","","","","","","","","","","","Return the currently allocated capacity of the string.","Clear the string.","Clone a [<code>SmartString</code>].","","","","","","Construct a draining iterator over a given range.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Insert a <code>char</code> into the string at the given index.","Insert a string slice into the string at the given index.","","Unwrap a boxed <code>String</code>, or copy an inline string into a …","","","","","Test whether the string is empty.","Test whether the string is currently inlined.","","Return the length in bytes of the string.","Construct an empty string.","Construct an empty string.","Construct an empty string.","","","","","Pop a <code>char</code> off the end of the string.","Push a character to the end of the string.","Copy a string slice onto the end of the string.","Remove a <code>char</code> from the string at the given index.","Replaces a range with the contents of a string slice.","Filter out <code>char</code>s not matching a predicate.","Shrink the capacity of the string to fit its contents …","","Split the string into two at the given index.","","","Truncate the string to <code>new_len</code> bytes.","","","","","","","","","","","","","Validate the crate’s assumptions about [<code>String</code>] memory …","","A convenience alias for a [<code>Compact</code>] layout [<code>SmartString</code>].","A convenience alias for a [<code>LazyCompact</code>] layout […"],"i":[1,0,1,1,0,1,0,0,0,0,2,2,2,2,2,0,2,2,2,2,2,3,2,2,4,5,3,2,2,4,5,2,2,2,2,2,2,2,2,2,3,2,2,2,2,2,2,2,2,2,2,2,2,3,2,2,4,5,3,2,2,2,2,2,2,2,4,5,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,2,2,4,5,3,2,2,3,2,2,2,2,3,3,2,2,2,2,2,2,2,2,2,3,2,2,2,2,3,2,4,5,3,2,4,5,3,2,4,5,0,2,0,0],"f":[null,null,null,null,null,null,null,null,null,null,[[]],[[["string",3]]],[[["string",3]]],[[["str",15]]],[[]],null,[[],["str",15]],[[],["str",15]],[[],["str",15]],[[]],[[],["str",15]],[[]],[[]],[[],["str",15]],[[]],[[]],[[]],[[],["str",15]],[[]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[]],[[],["ordering",4]],[[]],[[]],[[]],[[],["drain",3]],[[]],[[]],[[["str",15]],["bool",15]],[[["string",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["str",15]]],[[]],[[["string",3]]],[[["str",15]]],[[["string",3]]],[[["box",3],["str",15]]],[[["cow",4],["str",15]]],[[]],[[]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["str",15]],["result",4]],[[]],[[["usize",15],["rangeto",3]]],[[["usize",15],["rangetoinclusive",3]]],[[["range",3],["usize",15]]],[[["rangeinclusive",3],["usize",15]]],[[["rangefull",3]]],[[["rangefrom",3],["usize",15]]],[[["range",3],["usize",15]]],[[["usize",15],["rangetoinclusive",3]]],[[["usize",15],["rangeto",3]]],[[["rangefrom",3],["usize",15]]],[[["rangefull",3]]],[[["rangeinclusive",3],["usize",15]]],[[["usize",15],["char",15]]],[[["usize",15],["str",15]]],[[]],[[],["string",3]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["option",4]],[[],["usize",15]],[[]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[],[["option",4],["ordering",4]]],[[["str",15]],[["option",4],["ordering",4]]],[[],[["option",4],["char",15]]],[[["char",15]]],[[["str",15]]],[[["usize",15]],["char",15]],[[["str",15]]],[[]],[[]],[[]],[[["usize",15]]],[[]],[[],["string",3]],[[["usize",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[["str",15]],[["result",4],["error",3]]],null,null],"p":[[8,"SmartStringMode"],[3,"SmartString"],[3,"Drain"],[3,"Compact"],[3,"LazyCompact"]]},\
"static_assertions":{"doc":"Banner","t":[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14],"n":["assert_cfg","assert_eq_align","assert_eq_size","assert_eq_size_ptr","assert_eq_size_val","assert_fields","assert_impl_all","assert_impl_any","assert_impl_one","assert_not_impl_all","assert_not_impl_any","assert_obj_safe","assert_trait_sub_all","assert_trait_super_all","assert_type_eq_all","assert_type_ne_all","const_assert","const_assert_eq","const_assert_ne"],"q":["static_assertions","","","","","","","","","","","","","","","","","",""],"d":["Asserts that a given configuration is set.","Asserts that types are equal in alignment.","Asserts that types are equal in size.","Asserts that values pointed to are equal in size.","Asserts that values are equal in size.","Asserts that the type has the given fields.","Asserts that the type implements <em>all</em> of the given traits.","Asserts that the type implements <em>any</em> of the given traits.","Asserts that the type implements exactly one in a set of …","Asserts that the type does <strong>not</strong> implement <em>all</em> of the given …","Asserts that the type does <strong>not</strong> implement <em>any</em> of the given …","Asserts that the traits support dynamic dispatch (…","Asserts that the trait is a child of all of the other …","Asserts that the trait is a parent of all of the other …","Asserts that <em>all</em> types in a list are equal to each other.","Asserts that <em>all</em> types are <strong>not</strong> equal to each other.","Asserts that constant expressions evaluate to <code>true</code>.","Asserts that constants are equal in value.","Asserts that constants are <strong>not</strong> equal in value."],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"p":[]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};